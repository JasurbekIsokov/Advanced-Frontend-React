{"version":3,"file":"features-AuthByUsername-ui-LoginForm-LoginForm-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AAIA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA","sources":["webpack://advanced-frontend/./src/features/AuthByUsername/model/selectors/getLoginState/getLoginState.ts","webpack://advanced-frontend/./src/features/AuthByUsername/model/slice/loginSlice.ts","webpack://advanced-frontend/./src/features/AuthByUsername/ui/LoginForm/LoginForm.tsx"],"sourcesContent":["import { StateSchema } from \"app/providers/StoreProvider\";\n\nexport const getLoginState = (state: StateSchema) => state?.loginForm;\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { LoginSchema } from \"../types/loginSchema\";\nimport { loginByUsername } from \"../services/loginByUserName/loginByUserName\";\n\nconst initialState: LoginSchema = {\n  isLoading: false,\n  username: \"\",\n  password: \"\",\n};\n\nexport const loginSlice = createSlice({\n  name: \"login\",\n  initialState,\n  reducers: {\n    setUsername: (state, action: PayloadAction<string>) => {\n      state.username = action.payload;\n    },\n    setPassword: (state, action: PayloadAction<string>) => {\n      state.password = action.payload;\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginByUsername.pending, (state) => {\n        state.error = undefined;\n        state.isLoading = true;\n      })\n      .addCase(loginByUsername.fulfilled, (state, action) => {\n        state.isLoading = false;\n      })\n      .addCase(loginByUsername.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      });\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { actions: loginActions } = loginSlice;\nexport const { reducer: loginReducer } = loginSlice;\n","import { useTranslation } from \"react-i18next\";\nimport { Button, ButtonTheme } from \"shared/ui/Button/Button\";\nimport { Input } from \"shared/ui/Input/Input\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { memo, useCallback } from \"react\";\nimport { Text, TextTheme } from \"shared/ui/Text/Text\";\nimport { loginActions } from \"../../model/slice/loginSlice\";\nimport cls from \"./LoginForm.module.scss\";\nimport { getLoginState } from \"../../model/selectors/getLoginState/getLoginState\";\nimport { classNames } from \"shared/lib/classNames/ClassNames\";\n\ninterface LoginFormProps {\n  className?: string;\n}\n\nexport const LoginForm = memo(({ className }: LoginFormProps) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { username, password, error, isLoading } = useSelector(getLoginState);\n\n  const onChangeUsername = useCallback(\n    (value: string) => {\n      dispatch(loginActions.setUsername(value));\n    },\n    [dispatch]\n  );\n\n  const onChangePassword = useCallback(\n    (value: string) => {\n      dispatch(loginActions.setPassword(value));\n    },\n    [dispatch]\n  );\n\n  const onLoginClick = useCallback(() => {\n    // return dispatch(loginByUsername({ username, password }));\n  }, [dispatch, password, username]);\n\n  return (\n    <div className={classNames(cls.LoginForm, {}, [className])}>\n      <Text title={t(\"Форма авторизации\")} />\n      {error && (\n        <Text\n          text={t(\"Вы ввели неверный логин или пароль\")}\n          theme={TextTheme.ERROR}\n        />\n      )}\n      <Input\n        autofocus\n        type=\"text\"\n        className={cls.input}\n        placeholder={t(\"Введите username\")}\n        onChange={onChangeUsername}\n        value={username}\n      />\n      <Input\n        type=\"text\"\n        className={cls.input}\n        placeholder={t(\"Введите пароль\")}\n        onChange={onChangePassword}\n        value={password}\n      />\n      <Button\n        theme={ButtonTheme.OUTLINE}\n        className={cls.loginBtn}\n        onClick={onLoginClick}\n        disabled={isLoading}\n      >\n        {t(\"Войти\")}\n      </Button>\n    </div>\n  );\n});\n"],"names":[],"sourceRoot":""}