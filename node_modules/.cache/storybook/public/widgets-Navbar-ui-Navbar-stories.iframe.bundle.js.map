{"version":3,"file":"widgets-Navbar-ui-Navbar-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAGA;AA5CA","sources":["webpack://advanced-frontend/./src/widgets/Navbar/ui/Navbar.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport React, { useCallback, useState } from \"react\";\nimport { Button, ButtonTheme } from \"shared/ui/Button/Button\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport cls from \"./Navbar.module.scss\";\nimport { getUserAuthData } from \"entities/user/model/selectors/getUserAuthData/getUserAuthData\";\nimport { userActions } from \"entities/user/model/slice/userSlice\";\nimport { classNames } from \"shared/lib/classNames/ClassNames\";\nimport { LoginModal } from \"features/AuthByUserName/ui/LoginModal/LoginModal\";\n\ninterface NavbarProps {\n  className?: string;\n}\n\nexport const Navbar = ({ className }: NavbarProps) => {\n  const { t } = useTranslation();\n  const [isAuthModal, setIsAuthModal] = useState(false);\n  const authData = useSelector(getUserAuthData);\n  const dispatch = useDispatch();\n\n  const onCloseModal = useCallback(() => {\n    setIsAuthModal(false);\n  }, []);\n\n  const onShowModal = useCallback(() => {\n    setIsAuthModal(true);\n  }, []);\n\n  const onLogout = useCallback(() => {\n    dispatch(userActions.logout());\n  }, [dispatch]);\n\n  if (authData) {\n    return (\n      <div className={classNames(cls.Navbar, {}, [className])}>\n        <Button\n          theme={ButtonTheme.CLEAR_INVERTED}\n          className={cls.links}\n          onClick={onLogout}\n        >\n          {t(\"Выйти\")}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames(cls.Navbar, {}, [className])}>\n      <Button\n        theme={ButtonTheme.CLEAR_INVERTED}\n        className={cls.links}\n        onClick={onShowModal}\n      >\n        {t(\"Войти\")}\n      </Button>\n      <LoginModal isOpen={isAuthModal} onClose={onCloseModal} />\n    </div>\n  );\n};\n"],"names":[],"sourceRoot":""}